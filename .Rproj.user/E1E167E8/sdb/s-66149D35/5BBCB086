{
    "collab_server" : "",
    "contents" : "#Getting and Cleaning Data\n## Week 4 Assignment\n\n### Final Assignment on Wearable Data for JHU Coursera Course\n\n(run_analysis.R) does the following:\n\n(@) Load the filenames and paths into a list:\n        \n        `df_Names <- unzip(temp, list = FALSE, exdir = \"data\")`\n        \n(@) Load the activity and variable (column) names into their own variables. While we're at it, let's tidy up the column names by making them lowercase and removing non-letter characters:\n        \n        `activity_labels <- read.table(df_Names[1], header = FALSE, col.names = c(\"activityID\", \"label\"))`\n        `colNames <- select(read.table(df_Names[2]), names = 2) %>% `\n        `mutate(names = tolower(names))  %>%`\n        `mutate(names = trimws(gsub(\"[^a-z]\",\"\",names)))`\n  \n(@) Next, we get test subjects, data, and activities from separate .txt files and place them into data frames. Note that we can pick up the table from the list of filenames we generated while unzipping the downloaded data. Because we will want to group by subject and activity type further down, we have to make sure that subjects and activities are loaded as factors. We use the cleaned up column names when we read in the data.\n  \n        `testSubj <- read.table(df_Names[14], header = FALSE, colClasses = \"factor\")`\n        `test <- read.table(df_Names[15], header = FALSE, col.names = colNames$names)`\n        `testAct <- read.table(df_Names[16], header = FALSE, colClasses = \"factor\")`\n\n(@) We load a similar set of variables for training subjects, data, and activities. \n          `trainSubj <- read.table(df_Names[26], header = FALSE, colClasses = \"factor\")`\n          `train <- read.table(df_Names[27], header = FALSE, col.names = colNames$names)`\n          `trainAct <- read.table(df_Names[28], header = FALSE, colClasses = \"factor\")`\n  \n(@) To make sure we know if a given row is from training or test, we add a column for the data set. We pull in the subject as a factor and activityID from the variables created above. Mostly I split this out here to make the program easier to read.\n  \n          `train <- mutate(train, subj = factor(trainSubj$V1, levels = c(1:30)), dataSet = \"train\", activityID = trainAct[,1])`\n          `test <- mutate(test, subj = factor(testSubj$V1, levels = c(1:30)), dataSet = \"test\", activityID = testAct[,1])`\n  \n(@) The last step of the first requirement is to combine the training and test data into a single data frame.\n  `df <- bind_rows(train, test) `\n\n\n(@) One line of code can extract the variables for mean and standard deviation\n\n        ` df.f <- select(df, subj, activityID, contains(\"mean\"), contains(\"std\"))`\n        \n (@) And I'm also going to free up some memory by getting rid of our old variables.\n \n        `rm(list = ls(pattern = \"test|train\"))`\n\n(@) We use an inner join here to place descriptive activity names into the data set. We shift the columns around to make the data frame easier to read and drop the numeric ID because it's not descriptive. \n        `df.f <- merge(df.f, activity_labels, by = \"activityID\") %>%`\n                `select(subj, activity = label, 3:89)`\n\n(@) We already labeled our data set with descriptive variable names before we brought them in as column names.\n\n(@) From the data set `df.f`, I use group_by() and summarize() to create an independent tidy data set with the average of each variable for each activity across subjects and each subject by activity. \n        ` by.subj <- arrange(df.f, subj, activity) %>%`\n        `         group_by(subj, activity) %>%`\n        `         summarize_all(mean)`\n         \n        ` by.act <- arrange(df.f, activity, subj) %>%`\n        `         group_by(activity) %>%`\n        `         summarize_all(mean)`\n\n",
    "created" : 1475008421127.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2265499909",
    "id" : "5BBCB086",
    "lastKnownWriteTime" : 1475012281,
    "last_content_update" : 1475012281548,
    "path" : "C:/Users/amsilverman/Box Sync/@Project Support/get_and_clean_data/README.md",
    "project_path" : "README.md",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "markdown"
}